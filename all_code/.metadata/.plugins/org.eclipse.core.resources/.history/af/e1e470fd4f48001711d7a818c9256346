package InternalUnitParser.CSharpAdaptation;

import InternalUnitParser.Hardcoding.*;
import java.util.ArrayList;


public class CSharpOther
{
	public static void StartHarcoding()
	{
		HCMain.Start();
		HCCompounds.Start();
		HCOther.Start();
	}
	
	public static ArrayList<Character> StringToCharacters(String input)
	{
		ArrayList<Character> chars = new ArrayList<Character>();
		if (input == null) return chars;
		
		for (char item: input.toCharArray())
		{
			chars.add(item);
		}
		
		return chars;
	}
	
	public static <X> ArrayList<X> ArrayToArrayList(X[] input)
	{
		ArrayList<X> output = new ArrayList<X>();
		
		for (X item: input)
		{
			output.add(item);
		}
		
		return output;
	}
	
	public static String StringJoin(String separator, String[] parts, int start, int length)
	{
		return StringJoin
		(
			separator, ArrayToArrayList(parts), start, length
		);
	}
	
	public static String StringJoin(String separator, String[] parts)
	{
		return StringJoin
		(
			separator, ArrayToArrayList(parts)
		);
	}
	
	public static String StringJoin(String separator, ArrayList<String> parts)
	{
		return StringJoinInternal
		(
			separator, parts, null, 0, parts.size()
		);
	}
	
	public static String StringJoin(String separator, ArrayList<String> parts, int start, int length)
	{
		return StringJoinInternal
		(
			separator, parts, null, start, length
		);
	}
	
	public static String StringJoinChars(String separator, ArrayList<Character> parts2)
	{
		return StringJoinInternal
		(
			separator, null, parts2, 0, (parts2 == null ? 0 : parts2.size())
		);
	}
	
	static String StringJoinInternal(String separator, ArrayList<String> parts, ArrayList<Character> parts2, int start, int length)
	{
		if (parts == null && parts2 == null) return null;
		
		int total = 
		(
			parts == null ? parts2.size() : parts.size()
		);
		if (total == 1)
		{
			return 
			(
				parts == null ? parts2.get(0).toString() : parts.get(0)
			);
		}

		String outString = StringJoinInternalBit(parts, parts2, start, "");
		
		for (int i = start + 1; i < length; i++)
		{
			outString += StringJoinInternalBit(parts, parts2, i, separator);
		}
		
		return outString;		
	}
	
	static String StringJoinInternalBit(ArrayList<String> parts, ArrayList<Character> parts2, int i, String separator)
	{
		return separator + 
		(
			parts == null ? parts2.get(i).toString() : parts.get(i)
		);
	}
}
