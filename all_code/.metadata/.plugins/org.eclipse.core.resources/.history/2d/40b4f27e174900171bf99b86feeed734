package UnitParser;

import InternalUnitParser.Operations.*;

public class ErrorInfo
{
    /**Error type.**/
    public final ErrorTypes Type;
    /**Exception handling type.**/
    public final ExceptionHandlingTypes ExceptionHandling;
    /**Error message.**/
    public final String Message;  
    
    /**Initialises a new ErrorInfo instance.**/
    public ErrorInfo() 
    {
        Type = ErrorTypes.None;
        ExceptionHandling = ExceptionHandlingTypes.AlwaysTriggerException;
        Message = "";      
    }
    
    /**
    Initialises a new ErrorInfo instance.
    @param errorInfo ErrorInfo variable whose information will be used.
	**/
    public ErrorInfo(ErrorInfo errorInfo) 
    {
        if (errorInfo == null) errorInfo = new ErrorInfo();

        Type = errorInfo.Type;
        ExceptionHandling = errorInfo.ExceptionHandling;
        Message = errorInfo.Message;
    }
    
    /**Initialises a new ErrorInfo instance.
    @param type Member of the ErrorTypes enum to be used.
    **/    
    public ErrorInfo(ErrorTypes type) throws Exception
    {
    	this(type, ExceptionHandlingTypes.NeverTriggerException);
    }
    
    /**Initialises a new ErrorInfo instance.
    @param type Member of the ErrorTypes enum to be used.
    @param exceptionHandling Member of the ExceptionHandlingTypes enum to be used.
    **/
    public ErrorInfo(ErrorTypes type, ExceptionHandlingTypes exceptionHandling) throws Exception
    {
        Type = type;
        ExceptionHandling = exceptionHandling;
        Message = GetMessage(type);

        if (type != ErrorTypes.None && ExceptionHandling == ExceptionHandlingTypes.AlwaysTriggerException)
        {
            throw new Exception(Message);
        }  
    } 
    
    private String GetMessage(ErrorTypes type)
    {
        String outString = "";

        if (type == ErrorTypes.InvalidOperation)
        {
            outString = "Invalid Operation. Some operands are incompatible among them or refer to invalid units.";
        }
        else if (type == ErrorTypes.InvalidUnit)
        {
            outString = "Invalid Input. The input string doesn't match any supported unit.";
        }
        else if (type == ErrorTypes.NumericError)
        {
            outString = "Numeric Error. An invalid mathematical operation has been performed.";
        }
        else if (type == ErrorTypes.NumericParsingError)
        {
            outString = "Numeric Parsing Error. The input doesn't match the expected number + space + unit format.";
        }
        else if (type == ErrorTypes.InvalidUnitConversion)
        {
            outString = "Invalid Unit Conversion. The unit conversion cannot be performed with these inputs.";
        }

        return outString;
    }
    
    public boolean Equals(ErrorInfo other)
    {
        return
        (
            other == null ? false :
            Equals.ErrorsAreEqual(this, other)
        );
    }

    @Override
    public boolean equals(Object obj)
    {
        return Equals((ErrorInfo)obj);
    }

    @Override
    public int hashCode() { return 0; }
}
